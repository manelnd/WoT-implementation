/// <reference types="node" />
import Servient, { ProtocolServer, ExposedThing } from "@node-wot/core";
import { Socket } from "dgram";
import { CoapServerConfig } from "./coap";
export default class CoapServer implements ProtocolServer {
    readonly scheme: string;
    private readonly PROPERTY_DIR;
    private readonly ACTION_DIR;
    private readonly EVENT_DIR;
    private readonly port;
    private readonly address?;
    private mdnsIntroducer?;
    private readonly server;
    private readonly things;
    private readonly coreResources;
    constructor(config?: CoapServerConfig);
    start(servient: Servient): Promise<void>;
    private closeServer;
    stop(): Promise<void>;
    getSocket(): Socket;
    getPort(): number;
    expose(thing: ExposedThing, tdTemplate?: WoT.ExposedThingInit): Promise<void>;
    private createThingUrlPath;
    private fillInBindingData;
    private createThingBase;
    private fillInMetaPropertiesBindingData;
    private getReadableProperties;
    private createPropertyMetaOpValues;
    private fillInPropertyBindingData;
    private fillInActionBindingData;
    private fillInEventBindingData;
    private createAffordanceForm;
    private logHrefAssignment;
    private setUpIntroductionMethods;
    private createCoreResource;
    destroy(thingId: string): Promise<boolean>;
    private formatCoreLinkFormatResources;
    private handleWellKnownCore;
    private handleTdRequest;
    private processAcceptValue;
    private handleRequest;
    private processRequestUri;
    private handleThingsRequest;
    private handlePropertyRequest;
    private handlePropertiesRequest;
    private handleReadMultipleProperties;
    private handleReadProperty;
    private handleObserveProperty;
    private createContentListener;
    private handleWriteProperty;
    private handleActionRequest;
    private createInteractionOptions;
    private handleEventRequest;
    private avoidDuplicatedObserveRegistration;
    private getContentTypeFromRequest;
    private checkContentTypeSupportForInput;
    private getThingDescriptionPayload;
    private parseUriSegments;
    private sendContentResponse;
    private sendChangedResponse;
    private streamContentResponse;
    private sendNotFoundResponse;
    private sendMethodNotAllowedResponse;
    private sendResponse;
    private formatRequestOrigin;
    private isEmpty;
}
